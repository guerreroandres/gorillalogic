name: wavely-user-service Deploy

on:
  workflow_dispatch:
    inputs:
      cluster:
        type: choice
        description: Cluster
        required: true
        options: 
        - staging0
        - rd0
      tag:
        description: 'Version to Deploy'
        required: false
        type: string
      goal:
        type: choice
        description: Goal
        required: true
        options: 
        - Deploy
        - Release

concurrency:
  group: build-and-deploy

jobs:
  build:
    name: "Building wavely-user-service"
    runs-on: ubuntu-latest
    outputs:
      app-version: ${{ env.app_version }}
      deploy_env: ${{ steps.env.outputs.DEPLOY_ENV }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Get Github action IP
      id: ip
      uses: haythem/public-ip@v1.2

    - name: Add Github Actions IP to Security group
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ env.AWS_SG_ID }} --ip-permissions IpProtocol=tcp,FromPort=${{ env.AWS_SG_PORT }},ToPort=${{ env.AWS_SG_PORT }},IpRanges="[{CidrIp=${{ steps.ip.outputs.ipv4 }}/32,Description=${{ env.AWS_SG_DESCRIPTION }}}]"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION_PROD }}
        AWS_SG_ID: ${{ secrets.SG }}
        AWS_SG_PORT: 80
        AWS_SG_DESCRIPTION: "Github Actions - delete"

    - uses: whelk-io/maven-settings-xml-action@v20
      with:
        output_file: ./settings.xml
        mirrors: ${{ env.mirrors }}
        servers: ${{ env.servers }}
        repositories: ${{ env.repositories }}
      env:
        mirrors: ${{ secrets.MIRRORS }}
        servers: ${{ secrets.SERVERS }}
        repositories: ${{ secrets.REPOSITORIES }}

    - name: Environment
      id: env
      run: |
        if [ $CLUSTER == 'prod' ]
        then
          echo "::set-output name=DEPLOY_ENV::PROD"
        elif [ $CLUSTER == 'staging0' ]
        then
          if [ $GOAL == 'Deploy' ]
          then
            echo "::set-output name=REPO::nexus-snapshots"
          else
            echo "::set-output name=REPO::nexus-releases"
          fi
          echo "::set-output name=DEPLOY_ENV::DEV"
          VERSION=$( mvn --settings ./settings.xml org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout | cut -f1 -d "-" )
          GROUPID=$( mvn --settings ./settings.xml org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.groupId -q -DforceStdout )
          ARTIFACTID=$( mvn --settings ./settings.xml org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.artifactId -q -DforceStdout )
          groupId_m=${GROUPID//[.]//}
          URL=$( mvn --settings ./settings.xml org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.distributionManagement.repository.url -q -DforceStdout )
          echo "::set-output name=version::v$VERSION"
          echo "::set-output name=tag::$VERSION"
          echo "::set-output name=groupid::$groupId_m"
          echo "::set-output name=artifactid::$ARTIFACTID"
          echo "::set-output name=url::$URL"          
        else
          echo "::set-output name=DEPLOY_ENV::DEV"
        fi
      env:
        CLUSTER: ${{ github.event.inputs.cluster }}
        GOAL: ${{ github.event.inputs.goal }}

    - name: Tag Exists???
      if: github.event.inputs.cluster == 'staging0'
      uses: mukunku/tag-exists-action@v1.0.0
      id: checkTag
      with: 
        tag: ${{ steps.var.outputs.version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Checking for duplicate TAG...
      if: github.event.inputs.cluster == 'staging0'
      id: display
      run: |
        if [ ${{ steps.checkTag.outputs.exists }} == 'true' ]
        then
          echo "[ ERROR ] Project Version Duplicated, please check the git tags."
          exit 1
        fi

    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        server-id: ${{ steps.var.outputs.REPO }}
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD

    - name: Version to Deploy
      id: deploy_version
      run: |
        if [ -z "$deploy_tag" ]
        then
          git pull
          pom_version=$( mvn --settings ./settings.xml org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout )
                    echo "::set-output name=mvndeploy::y"
        else
        deploy_env=( $( aws ecr describe-images --region $awsregion --repository-name $repository --query 'sort_by(imageDetails,& imagePushedAt)[*].imageTags[0]' --output yaml | tail -n 10 | awk -F'- ' '{print $2}' ) )
          if [[ " ${deploy_env[*]} " =~ " ${deploy_tag} " ]]
          then
            pom_version=$deploy_tag
            echo "::set-output name=mvndeploy::n"
            echo "will proceed to deploy version: $pom_version."
          else
            echo "[ERROR] Version to Deploy not found, please double check available versions."
            exit 1
          fi
        fi        
        echo "app_version=$pom_version" >> $GITHUB_ENV
      env:
        awsregion: ${{ secrets[format('AWS_DEFAULT_REGION_{0}', steps.env.outputs.DEPLOY_ENV)] }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        repository: wavely-user-service
        deploy_tag: ${{ github.event.inputs.tag }}

    - name: Maven Compile
      if: steps.deploy_version.outputs.mvndeploy == 'y'
      id: maven
      run: |
        if [ $CLUSTER == 'staging0' ]
        then
          if [ $GOAL == 'Deploy' ]
          then
            mvn --settings ./settings.xml clean deploy
          else
            if curl --output /dev/null --silent --head --fail "$URL/$GROUPID/$ARTIFACTID/$TAG"
            then
              echo "[ ERROR ] Repository folder: $TAG, already exists, please fix this before proceeding."
              exit 1
            fi
            git config user.email "action@github.com"
            git config user.name "GitHub Action"
            mvn --settings ./settings.xml -B release:clean
            mvn --settings ./settings.xml -B release:prepare
            mvn --settings ./settings.xml -B release:perform          
          fi
        else
        mvn --settings ./settings.xml clean package spring-boot:repackage
        fi
      env:
        MAVEN_USERNAME: ${{ secrets.NEXUS_USER }}
        MAVEN_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        CLUSTER: ${{ github.event.inputs.cluster }}
        GOAL: ${{ github.event.inputs.goal }}
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        TAG: ${{ steps.var.outputs.tag }}
        URL: ${{ steps.var.outputs.url }}
        GROUPID: ${{ steps.var.outputs.groupid }}
        ARTIFACTID: ${{ steps.var.outputs.artifactid }}

    - name: Configure AWS credentials
      if: steps.deploy_version.outputs.mvndeploy == 'y'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets[format('AWS_DEFAULT_REGION_{0}', steps.env.outputs.DEPLOY_ENV)] }}

    - name: Login to Amazon ECR
      if: steps.deploy_version.outputs.mvndeploy == 'y'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      if: steps.deploy_version.outputs.mvndeploy == 'y'
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: wavely-user-service
        IMAGE_TAG: ${{ env.app_version }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Remove Github Actions IP from security group
      if: always()
      run: |
        aws ec2 revoke-security-group-ingress --region ${{ env.AWS_DEFAULT_REGION }} --group-id ${{ env.AWS_SG_ID }} --protocol tcp --port ${{ env.AWS_SG_PORT }} --cidr ${{ steps.ip.outputs.ipv4 }}/32
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION_PROD }}
        AWS_SG_ID: ${{ secrets.SG }}
        AWS_SG_PORT: 80

  deploy:
    name: "Deploying wavely-user-service with Helm Chart"
    runs-on: ubuntu-latest
    needs: build
    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        repository: Wavely-California/wavely-delivery-tools
        ssh-key: ${{ secrets.SSH_KEY }}
        ref: andres

    - name: update appVersion
      run: |
        sed -i 's/^appVersion:.*/appVersion: "'"$pom_version"'"/g' ./product-charts/wavely-user-service/Chart.yaml
      env:
        pom_version: ${{ needs.build.outputs.app-version }}

    - uses: stefanzweifel/git-auto-commit-action@v4
      if: steps.deploy_version.outputs.mvndeploy == 'y'
      with:
        commit_message: "Updating Chart appVersion"

    - name: get appVersion
      run: git pull

    - name: AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets[format('AWS_DEFAULT_REGION_{0}', needs.build.outputs.deploy_env)] }}

    - name: Helm Deploy
      uses: koslibpro/helm-eks-action@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets[format('KUBECONFIG_{0}', github.event.inputs.cluster)] }}
        DB_USERNAME: ${{ secrets[format('DBUSER_{0}', github.event.inputs.cluster)] }}
        DB_PASSWORD: ${{ secrets[format('DBPASSWORD_{0}', github.event.inputs.cluster)] }}
        DB_SERVER_NAME: ${{ secrets[format('DBHOST_{0}', github.event.inputs.cluster)] }}
        DB_SERVER_PORT: ${{ secrets[format('DBPORT_{0}', github.event.inputs.cluster)] }}
        DB_SCHEMA: ${{ secrets[format('DBSCHEMA_{0}', github.event.inputs.cluster)] }}
      with:
        command: helm upgrade wavely-user-service ./product-charts/wavely-user-service/ --install --wait --atomic --namespace=test --create-namespace --set deployment.tag=${{ needs.build.outputs.app-version }} --set deployment.env.dbServerName=${DB_SERVER_NAME} --set deployment.env.dbServerPort=${DB_SERVER_PORT} --set deployment.env.dbSchema=${DB_SCHEMA} --set deployment.env.dbUserName=${DB_USERNAME} --set deployment.env.dbPassword=${DB_PASSWORD} --values ./product-charts/wavely-user-service/values-${{ github.event.inputs.cluster }}.yaml